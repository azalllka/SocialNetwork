// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialNetwork.Persistence.Contexts;

#nullable disable

namespace SocialNetworkNew.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620134052_AddMessages")]
    partial class AddMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Img")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CommentId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "Очень жду данное мероприятие",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Denis",
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "Будет здорово!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Anna",
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Ivan",
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 4,
                            Content = "Отличная идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Olga",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 5,
                            Content = "Не могу дождаться!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Sergey",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 6,
                            Content = "Будет интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Maria",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 7,
                            Content = "Обязательно приду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Alex",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 8,
                            Content = "Супер идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Elena",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 9,
                            Content = "Очень интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Dmitry",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 10,
                            Content = "Не пропущу!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Kate",
                            PostId = 2
                        },
                        new
                        {
                            CommentId = 11,
                            Content = "Отличное мероприятие!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Victor",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 12,
                            Content = "Будет весело!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Svetlana",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 13,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Igor",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 14,
                            Content = "Отличная идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Natalia",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 15,
                            Content = "Не могу дождаться!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Andrey",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 16,
                            Content = "Будет интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Yulia",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 17,
                            Content = "Обязательно приду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Boris",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 18,
                            Content = "Супер идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Tatyana",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 19,
                            Content = "Очень интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Roman",
                            PostId = 3
                        },
                        new
                        {
                            CommentId = 20,
                            Content = "Не пропущу!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Irina",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 21,
                            Content = "Отличное мероприятие!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Maxim",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 22,
                            Content = "Будет весело!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Lena",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 23,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Pavel",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 24,
                            Content = "Отличная идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Valeria",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 25,
                            Content = "Не могу дождаться!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Nikolay",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 26,
                            Content = "Будет интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Ekaterina",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 27,
                            Content = "Обязательно приду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Vladimir",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 28,
                            Content = "Супер идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Alina",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 29,
                            Content = "Очень интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Grigory",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 30,
                            Content = "Не пропущу!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Polina",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 31,
                            Content = "Отличное мероприятие!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Evgeny",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 32,
                            Content = "Будет весело!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Ksenia",
                            PostId = 4
                        },
                        new
                        {
                            CommentId = 33,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Anton",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 34,
                            Content = "Отличная идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Ludmila",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 35,
                            Content = "Не могу дождаться!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Kirill",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 36,
                            Content = "Будет интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Marina",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 37,
                            Content = "Обязательно приду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Gleb",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 38,
                            Content = "Супер идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Vera",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 39,
                            Content = "Очень интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Yuri",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 40,
                            Content = "Не пропущу!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Sofia",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 41,
                            Content = "Отличное мероприятие!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Ilya",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 42,
                            Content = "Будет весело!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Anastasia",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 43,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Vasily",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 44,
                            Content = "Отличная идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Alisa",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 45,
                            Content = "Не могу дождаться!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Fedor",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 46,
                            Content = "Будет интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Daria",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 47,
                            Content = "Обязательно приду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-4.jpg",
                            Name = "Mikhail",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 48,
                            Content = "Супер идея!",
                            Id = 0,
                            Img = "/images/avatars/avatar-5.jpg",
                            Name = "Viktoria",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 49,
                            Content = "Очень интересно!",
                            Id = 0,
                            Img = "/images/avatars/avatar-6.jpg",
                            Name = "Timur",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 50,
                            Content = "Не пропущу!",
                            Id = 0,
                            Img = "/images/avatars/avatar-7.jpg",
                            Name = "Olesya",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 51,
                            Content = "Отличное мероприятие!",
                            Id = 0,
                            Img = "/images/avatars/avatar-1.jpg",
                            Name = "Stanislav",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 52,
                            Content = "Будет весело!",
                            Id = 0,
                            Img = "/images/avatars/avatar-2.jpg",
                            Name = "Milana",
                            PostId = 5
                        },
                        new
                        {
                            CommentId = 53,
                            Content = "С нетерпением жду!",
                            Id = 0,
                            Img = "/images/avatars/avatar-3.jpg",
                            Name = "Artem",
                            PostId = 5
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("GoingCount")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Img")
                        .HasColumnType("text");

                    b.Property<int>("IntrestedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Author = "UK BRANDS",
                            Date = new DateOnly(2025, 5, 1),
                            GoingCount = 951,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 742,
                            Name = "The Global Creative"
                        },
                        new
                        {
                            EventId = 2,
                            Author = "Catiana",
                            Date = new DateOnly(2025, 7, 15),
                            GoingCount = 452,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 153,
                            Name = "Wedding trend Ideas"
                        },
                        new
                        {
                            EventId = 3,
                            Author = "Morleam",
                            Date = new DateOnly(2025, 6, 24),
                            GoingCount = 753,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 651,
                            Name = "About Safety and Flight"
                        },
                        new
                        {
                            EventId = 4,
                            Author = "UK BRANDS",
                            Date = new DateOnly(2025, 8, 4),
                            GoingCount = 614,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 824,
                            Name = "Perspective is everything"
                        },
                        new
                        {
                            EventId = 5,
                            Author = "Global Hub",
                            Date = new DateOnly(2025, 3, 1),
                            GoingCount = 567,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 345,
                            Name = "Creative Minds Meetup"
                        },
                        new
                        {
                            EventId = 6,
                            Author = "TechWorld",
                            Date = new DateOnly(2025, 5, 1),
                            GoingCount = 456,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 234,
                            Name = "Tech Innovators Summit"
                        },
                        new
                        {
                            EventId = 7,
                            Author = "ArtLovers",
                            Date = new DateOnly(2025, 5, 11),
                            GoingCount = 678,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 456,
                            Name = "Art Gallery Opening"
                        },
                        new
                        {
                            EventId = 8,
                            Author = "MelodyMakers",
                            Date = new DateOnly(2025, 5, 3),
                            GoingCount = 789,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 567,
                            Name = "Music Festival Night"
                        },
                        new
                        {
                            EventId = 9,
                            Author = "Entrepreneurs",
                            Date = new DateOnly(2025, 5, 21),
                            GoingCount = 890,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 678,
                            Name = "Startup Pitch Day"
                        },
                        new
                        {
                            EventId = 10,
                            Author = "LensCrafters",
                            Date = new DateOnly(2025, 5, 4),
                            GoingCount = 901,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 789,
                            Name = "Photography Workshop"
                        },
                        new
                        {
                            EventId = 11,
                            Author = "FoodFanatics",
                            Date = new DateOnly(2025, 5, 22),
                            GoingCount = 101,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 890,
                            Name = "Foodies Gathering"
                        },
                        new
                        {
                            EventId = 12,
                            Author = "ReadersUnite",
                            Date = new DateOnly(2025, 6, 12),
                            GoingCount = 112,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 901,
                            Name = "Book Club Meeting"
                        },
                        new
                        {
                            EventId = 13,
                            Author = "FitLife",
                            Date = new DateOnly(2025, 2, 4),
                            GoingCount = 223,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 101,
                            Name = "Fitness Bootcamp"
                        },
                        new
                        {
                            EventId = 14,
                            Author = "ZenMasters",
                            Date = new DateOnly(2025, 5, 7),
                            GoingCount = 334,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 223,
                            Name = "Yoga and Meditation"
                        },
                        new
                        {
                            EventId = 15,
                            Author = "CodeNinjas",
                            Date = new DateOnly(2025, 5, 13),
                            GoingCount = 445,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 334,
                            Name = "Coding Hackathon"
                        },
                        new
                        {
                            EventId = 16,
                            Author = "GameOn",
                            Date = new DateOnly(2025, 5, 5),
                            GoingCount = 556,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 445,
                            Name = "Gaming Tournament"
                        },
                        new
                        {
                            EventId = 17,
                            Author = "Cinephiles",
                            Date = new DateOnly(2025, 4, 1),
                            GoingCount = 667,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 556,
                            Name = "Film Screening Night"
                        },
                        new
                        {
                            EventId = 18,
                            Author = "DanceLovers",
                            Date = new DateOnly(2025, 5, 1),
                            GoingCount = 778,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 667,
                            Name = "Dance Workshop"
                        },
                        new
                        {
                            EventId = 19,
                            Author = "StyleIcons",
                            Date = new DateOnly(2025, 5, 1),
                            GoingCount = 889,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 778,
                            Name = "Fashion Show Extravaganza"
                        },
                        new
                        {
                            EventId = 20,
                            Author = "Connectors",
                            Date = new DateOnly(2025, 5, 2),
                            GoingCount = 990,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 889,
                            Name = "Networking Mixer"
                        },
                        new
                        {
                            EventId = 21,
                            Author = "ScienceGeeks",
                            Date = new DateOnly(2025, 4, 30),
                            GoingCount = 111,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 990,
                            Name = "Science Fair"
                        },
                        new
                        {
                            EventId = 22,
                            Author = "KindHearts",
                            Date = new DateOnly(2025, 4, 30),
                            GoingCount = 222,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 111,
                            Name = "Charity Gala Dinner"
                        },
                        new
                        {
                            EventId = 23,
                            Author = "PawsAndClaws",
                            Date = new DateOnly(2025, 4, 30),
                            GoingCount = 333,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 222,
                            Name = "Pet Adoption Day"
                        },
                        new
                        {
                            EventId = 24,
                            Author = "NatureExplorers",
                            Date = new DateOnly(2025, 4, 30),
                            GoingCount = 444,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 333,
                            Name = "Outdoor Adventure"
                        },
                        new
                        {
                            EventId = 25,
                            Author = "KitchenExperts",
                            Date = new DateOnly(2025, 5, 2),
                            GoingCount = 555,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 444,
                            Name = "Cooking Masterclass"
                        },
                        new
                        {
                            EventId = 26,
                            Author = "CraftyHands",
                            Date = new DateOnly(2025, 5, 12),
                            GoingCount = 666,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 555,
                            Name = "DIY Craft Workshop"
                        },
                        new
                        {
                            EventId = 27,
                            Author = "Polyglots",
                            Date = new DateOnly(2025, 5, 10),
                            GoingCount = 777,
                            Id = 0,
                            Img = "/images/events/img-3.jpg",
                            IntrestedCount = 666,
                            Name = "Language Exchange Meetup"
                        },
                        new
                        {
                            EventId = 28,
                            Author = "GameNight",
                            Date = new DateOnly(2025, 5, 1),
                            GoingCount = 888,
                            Id = 0,
                            Img = "/images/events/img-4.jpg",
                            IntrestedCount = 777,
                            Name = "Board Games Night"
                        },
                        new
                        {
                            EventId = 29,
                            Author = "VRWorld",
                            Date = new DateOnly(2025, 5, 14),
                            GoingCount = 999,
                            Id = 0,
                            Img = "/images/events/img-1.jpg",
                            IntrestedCount = 888,
                            Name = "Virtual Reality Experience"
                        },
                        new
                        {
                            EventId = 30,
                            Author = "LaughOutLoud",
                            Date = new DateOnly(2025, 5, 13),
                            GoingCount = 1010,
                            Id = 0,
                            Img = "/images/events/img-2.jpg",
                            IntrestedCount = 999,
                            Name = "Comedy Night Live"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Email")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Phone")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Web")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = 0,
                            Id = 0,
                            Phone = 1,
                            Web = 1
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Notify", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Followed")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("LikedPhoto")
                        .HasColumnType("integer");

                    b.Property<int?>("Mentioned")
                        .HasColumnType("integer");

                    b.Property<int?>("SendMessage")
                        .HasColumnType("integer");

                    b.Property<int?>("SendRequest")
                        .HasColumnType("integer");

                    b.Property<int?>("SharedPhoto")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Notify");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Followed = 0,
                            Id = 0,
                            LikedPhoto = 1,
                            Mentioned = 1,
                            SendMessage = 0,
                            SendRequest = 1,
                            SharedPhoto = 1
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserPageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Контент1",
                            DislikeCount = 1,
                            LikeCount = 1,
                            UserPageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Контент2",
                            DislikeCount = 3,
                            LikeCount = 3,
                            UserPageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Контент3",
                            DislikeCount = 2,
                            LikeCount = 2,
                            UserPageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Контент4",
                            DislikeCount = 4,
                            LikeCount = 4,
                            UserPageId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Контент5",
                            DislikeCount = 5,
                            LikeCount = 5,
                            UserPageId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Контент2",
                            DislikeCount = 2,
                            LikeCount = 2,
                            UserPageId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Контент3",
                            DislikeCount = 3,
                            LikeCount = 3,
                            UserPageId = 3
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Privacy", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Activities")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FollowMe")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("MessageMe")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTags")
                        .HasColumnType("integer");

                    b.Property<int?>("SearchEngine")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Privacy");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Activities = 1,
                            FollowMe = 0,
                            Id = 0,
                            MessageMe = 0,
                            MyTags = 2,
                            SearchEngine = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.SocialLink", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("Github")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Youtube")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("SocialLinks");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Facebook = "facebook",
                            Github = "github",
                            Id = 0,
                            Instagram = "instagram",
                            Twitter = "twitter",
                            Youtube = "youtube"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Img")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("TwoFactorAuthentication")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Message", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });
#pragma warning restore 612, 618
        }
    }
}
